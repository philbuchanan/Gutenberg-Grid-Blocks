// # Editor Styles
// -----------------------------------------------------------------------------

// ## Settings
// -----------------------------------------------------------------------------

$gutter: 15px;
$column-space: $gutter * 2;
$total-block-grid-columns: 6;
$breakpoints: (
	// No suffix on classes for < 475px
	sm: 475px,
	md: 769px,
	lg: 1024px,
	xl: 1200px,
);



// ## Tools: Media Queries Mixin
// -----------------------------------------------------------------------------

@mixin respond-to($breakpoint) {
	@if $breakpoint == ">xs" {
		@content;
	}
	@else if $breakpoint == ">sm" {
		@media screen and (min-width: map-get($breakpoints, sm)) {
			@content;
		}
	}
	@else if $breakpoint == ">md" {
		@media screen and (min-width: map-get($breakpoints, md)) {
			@content;
		}
	}
	@else if $breakpoint == ">lg" {
		@media screen and (min-width: map-get($breakpoints, lg)) {
			@content;
		}
	}
	@else if $breakpoint == ">xl" {
		@media screen and (min-width: map-get($breakpoints, xl)) {
			@content;
		}
	}
}



// ## Shared
// -----------------------------------------------------------------------------

.o-row,
.o-block-grid {
	// block-editor-block-list__layout holds the child blocks
	// (i.e. o-col, o-block-grid__item)
	> .block-editor-inner-blocks > .block-editor-block-list__layout {
		display: flex;
		flex-wrap: wrap;
	}

	.block-list-appender {
		width: 100%;
	}
}

// The Gutenberg editor switches to a mobile layout with no left and right
// margins at 600 pixels. If we add our negative margins below this breakpoint,
// it introduces a horizontal scroll bar in the editor. See here for breakpoints:
// https://github.com/WordPress/gutenberg/blob/master/packages/base-styles/_breakpoints.scss
@media screen and (min-width: 600px) {
	.o-row,
	.o-block-grid {
		margin-left: -$gutter;
		margin-right: -$gutter;
	}
}

.wp-block[data-type="pb/column"],
.wp-block[data-type="pb/block-grid-item"] {
	flex: 0 0 auto;
	width: 100%;
	margin-left: 0;
	margin-right: 0;
}

.o-col,
.o-block-grid__item {
	padding-left: $gutter;
	padding-right: $gutter;
}

// If there are no inner blocks (i.e. the column or block grid item has no
// blocks inside it), we add a little padding to the top so the
// `block-list-appender` lines up with the top of sibling columns.
.block-has-no-inner-blocks {
	padding-top: 16px;
}



// ## Grid Rows and Columns
// -----------------------------------------------------------------------------

@mixin columns-loop($breakpoint: null) {
	@for $numerator from 1 through 12 {
		$width: ($numerator / 12) * 100%;

		.column-span-#{$numerator}#{$breakpoint} {
			width: $width;
		}

		.column-offset-#{$numerator}#{$breakpoint} {
			margin-left: $width;
		}
	}

	@for $index from 1 through 6 {
		@for $numerator from 1 through 12 {
			$width: ($numerator / 12) * 100%;

			.column-#{$index}-span-#{$numerator}#{$breakpoint} > .block-editor-inner-blocks > .block-editor-block-list__layout > [data-type="pb/column"]:nth-child(#{$index}) {
				@extend .column-span-#{$numerator}#{$breakpoint};
			}

			.column-#{$index}-offset-#{$numerator}#{$breakpoint} > .block-editor-inner-blocks > .block-editor-block-list__layout > [data-type="pb/column"]:nth-child(#{$index}) {
				@extend .column-offset-#{$numerator}#{$breakpoint};
			}
		}
	}
}

// No suffix on classes for < small breakpoint
@include columns-loop();

@each $name, $size in $breakpoints {
	@include respond-to(">#{$name}") {
		$suffix: "-#{$name}";
		@include columns-loop($suffix);
	}
}



// ## Block Grid
// -----------------------------------------------------------------------------

@mixin block-grid-loop($breakpoint: null) {
	@for $i from 1 through $total-block-grid-columns {
		$width: 100% / $i;

		.o-block-grid-#{$i}#{$breakpoint} > .block-editor-inner-blocks > .block-editor-block-list__layout > [data-type="pb/block-grid-item"] {
			width: $width;
		}
	}
}

@include block-grid-loop();

@each $name, $size in $breakpoints {
	@include respond-to(">#{$name}") {
		$suffix: "-#{$name}";
		@include block-grid-loop($suffix);
	}
}



// ## Alignments
// -----------------------------------------------------------------------------

// Specificity required becuase we don't want child grids to inherit their
// parents settings if the user nests one grid inside another. E.g. if the use
// sets `justify-content: space-between` on a `Columns` block, then nests a
// block grid inside one of the columns, the block grid should _not_ have
// `justify-content: space-between` applied.

.u-justify-content-center > .block-editor-inner-blocks > .block-editor-block-list__layout {
	justify-content: center;
}

.u-justify-content-end > .block-editor-inner-blocks > .block-editor-block-list__layout {
	justify-content: flex-end;
}

.u-justify-content-space-between > .block-editor-inner-blocks > .block-editor-block-list__layout {
	justify-content: space-between;
}

.u-justify-content-space-around > .block-editor-inner-blocks > .block-editor-block-list__layout {
	justify-content: space-around;
}

.u-align-items-center > .block-editor-inner-blocks > .block-editor-block-list__layout {
	align-items: center;
}

.u-align-items-end > .block-editor-inner-blocks > .block-editor-block-list__layout {
	align-items: flex-end;
}



// ## Number Control Styles
// -----------------------------------------------------------------------------

.c-number-control__input {
	width: 50px;
}

.c-number-control__percentage {
	display: inline-block;
	width: 70px;
	margin-left: 10px;
}

.c-number-control__icon {
	fill: #555d66;
	position: relative;
	top: 9px;
	margin-right: 6px;
}

.components-button.is-link.c-number-control__reset {
	margin-left: 20px;
}
